// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInvoicesForAccountParams creates a new GetInvoicesForAccountParams object
// with the default values initialized.
func NewGetInvoicesForAccountParams() *GetInvoicesForAccountParams {
	var (
		auditDefault                 = string("NONE")
		includeVoidedInvoicesDefault = bool(false)
		unpaidInvoicesOnlyDefault    = bool(false)
		withItemsDefault             = bool(false)
		withMigrationInvoicesDefault = bool(false)
	)
	return &GetInvoicesForAccountParams{
		Audit: &auditDefault,
		IncludeVoidedInvoices: &includeVoidedInvoicesDefault,
		UnpaidInvoicesOnly:    &unpaidInvoicesOnlyDefault,
		WithItems:             &withItemsDefault,
		WithMigrationInvoices: &withMigrationInvoicesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInvoicesForAccountParamsWithTimeout creates a new GetInvoicesForAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInvoicesForAccountParamsWithTimeout(timeout time.Duration) *GetInvoicesForAccountParams {
	var (
		auditDefault                 = string("NONE")
		includeVoidedInvoicesDefault = bool(false)
		unpaidInvoicesOnlyDefault    = bool(false)
		withItemsDefault             = bool(false)
		withMigrationInvoicesDefault = bool(false)
	)
	return &GetInvoicesForAccountParams{
		Audit: &auditDefault,
		IncludeVoidedInvoices: &includeVoidedInvoicesDefault,
		UnpaidInvoicesOnly:    &unpaidInvoicesOnlyDefault,
		WithItems:             &withItemsDefault,
		WithMigrationInvoices: &withMigrationInvoicesDefault,

		timeout: timeout,
	}
}

// NewGetInvoicesForAccountParamsWithContext creates a new GetInvoicesForAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInvoicesForAccountParamsWithContext(ctx context.Context) *GetInvoicesForAccountParams {
	var (
		auditDefault                 = string("NONE")
		includeVoidedInvoicesDefault = bool(false)
		unpaidInvoicesOnlyDefault    = bool(false)
		withItemsDefault             = bool(false)
		withMigrationInvoicesDefault = bool(false)
	)
	return &GetInvoicesForAccountParams{
		Audit: &auditDefault,
		IncludeVoidedInvoices: &includeVoidedInvoicesDefault,
		UnpaidInvoicesOnly:    &unpaidInvoicesOnlyDefault,
		WithItems:             &withItemsDefault,
		WithMigrationInvoices: &withMigrationInvoicesDefault,

		Context: ctx,
	}
}

// NewGetInvoicesForAccountParamsWithHTTPClient creates a new GetInvoicesForAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInvoicesForAccountParamsWithHTTPClient(client *http.Client) *GetInvoicesForAccountParams {
	var (
		auditDefault                 = string("NONE")
		includeVoidedInvoicesDefault = bool(false)
		unpaidInvoicesOnlyDefault    = bool(false)
		withItemsDefault             = bool(false)
		withMigrationInvoicesDefault = bool(false)
	)
	return &GetInvoicesForAccountParams{
		Audit: &auditDefault,
		IncludeVoidedInvoices: &includeVoidedInvoicesDefault,
		UnpaidInvoicesOnly:    &unpaidInvoicesOnlyDefault,
		WithItems:             &withItemsDefault,
		WithMigrationInvoices: &withMigrationInvoicesDefault,
		HTTPClient:            client,
	}
}

/*GetInvoicesForAccountParams contains all the parameters to send to the API endpoint
for the get invoices for account operation typically these are written to a http.Request
*/
type GetInvoicesForAccountParams struct {

	/*AccountID*/
	AccountID strfmt.UUID
	/*Audit*/
	Audit *string
	/*IncludeVoidedInvoices*/
	IncludeVoidedInvoices *bool
	/*StartDate*/
	StartDate *strfmt.Date
	/*UnpaidInvoicesOnly*/
	UnpaidInvoicesOnly *bool
	/*WithItems*/
	WithItems *bool
	/*WithMigrationInvoices*/
	WithMigrationInvoices *bool

	WithStackTrace        *bool // If set, returns full stack trace with error message
	timeout               time.Duration
	Context               context.Context
	HTTPClient            *http.Client
	ProcessLocationHeader bool // For create APIs that return 201, send another request and retrieve the resource.
}

// WithTimeout adds the timeout to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithTimeout(timeout time.Duration) *GetInvoicesForAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithContext(ctx context.Context) *GetInvoicesForAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithHTTPClient(client *http.Client) *GetInvoicesForAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithAccountID(accountID strfmt.UUID) *GetInvoicesForAccountParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetAccountID(accountID strfmt.UUID) {
	o.AccountID = accountID
}

// WithAudit adds the audit to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithAudit(audit *string) *GetInvoicesForAccountParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetAudit(audit *string) {
	o.Audit = audit
}

// WithIncludeVoidedInvoices adds the includeVoidedInvoices to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithIncludeVoidedInvoices(includeVoidedInvoices *bool) *GetInvoicesForAccountParams {
	o.SetIncludeVoidedInvoices(includeVoidedInvoices)
	return o
}

// SetIncludeVoidedInvoices adds the includeVoidedInvoices to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetIncludeVoidedInvoices(includeVoidedInvoices *bool) {
	o.IncludeVoidedInvoices = includeVoidedInvoices
}

// WithStartDate adds the startDate to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithStartDate(startDate *strfmt.Date) *GetInvoicesForAccountParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetStartDate(startDate *strfmt.Date) {
	o.StartDate = startDate
}

// WithUnpaidInvoicesOnly adds the unpaidInvoicesOnly to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithUnpaidInvoicesOnly(unpaidInvoicesOnly *bool) *GetInvoicesForAccountParams {
	o.SetUnpaidInvoicesOnly(unpaidInvoicesOnly)
	return o
}

// SetUnpaidInvoicesOnly adds the unpaidInvoicesOnly to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetUnpaidInvoicesOnly(unpaidInvoicesOnly *bool) {
	o.UnpaidInvoicesOnly = unpaidInvoicesOnly
}

// WithWithItems adds the withItems to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithWithItems(withItems *bool) *GetInvoicesForAccountParams {
	o.SetWithItems(withItems)
	return o
}

// SetWithItems adds the withItems to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetWithItems(withItems *bool) {
	o.WithItems = withItems
}

// WithWithMigrationInvoices adds the withMigrationInvoices to the get invoices for account params
func (o *GetInvoicesForAccountParams) WithWithMigrationInvoices(withMigrationInvoices *bool) *GetInvoicesForAccountParams {
	o.SetWithMigrationInvoices(withMigrationInvoices)
	return o
}

// SetWithMigrationInvoices adds the withMigrationInvoices to the get invoices for account params
func (o *GetInvoicesForAccountParams) SetWithMigrationInvoices(withMigrationInvoices *bool) {
	o.WithMigrationInvoices = withMigrationInvoices
}

// WriteToRequest writes these params to a swagger request
func (o *GetInvoicesForAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID.String()); err != nil {
		return err
	}

	if o.Audit != nil {

		// query param audit
		var qrAudit string
		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := qrAudit
		if qAudit != "" {
			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}

	}

	if o.IncludeVoidedInvoices != nil {

		// query param includeVoidedInvoices
		var qrIncludeVoidedInvoices bool
		if o.IncludeVoidedInvoices != nil {
			qrIncludeVoidedInvoices = *o.IncludeVoidedInvoices
		}
		qIncludeVoidedInvoices := swag.FormatBool(qrIncludeVoidedInvoices)
		if qIncludeVoidedInvoices != "" {
			if err := r.SetQueryParam("includeVoidedInvoices", qIncludeVoidedInvoices); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate strfmt.Date
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.UnpaidInvoicesOnly != nil {

		// query param unpaidInvoicesOnly
		var qrUnpaidInvoicesOnly bool
		if o.UnpaidInvoicesOnly != nil {
			qrUnpaidInvoicesOnly = *o.UnpaidInvoicesOnly
		}
		qUnpaidInvoicesOnly := swag.FormatBool(qrUnpaidInvoicesOnly)
		if qUnpaidInvoicesOnly != "" {
			if err := r.SetQueryParam("unpaidInvoicesOnly", qUnpaidInvoicesOnly); err != nil {
				return err
			}
		}

	}

	if o.WithItems != nil {

		// query param withItems
		var qrWithItems bool
		if o.WithItems != nil {
			qrWithItems = *o.WithItems
		}
		qWithItems := swag.FormatBool(qrWithItems)
		if qWithItems != "" {
			if err := r.SetQueryParam("withItems", qWithItems); err != nil {
				return err
			}
		}

	}

	if o.WithMigrationInvoices != nil {

		// query param withMigrationInvoices
		var qrWithMigrationInvoices bool
		if o.WithMigrationInvoices != nil {
			qrWithMigrationInvoices = *o.WithMigrationInvoices
		}
		qWithMigrationInvoices := swag.FormatBool(qrWithMigrationInvoices)
		if qWithMigrationInvoices != "" {
			if err := r.SetQueryParam("withMigrationInvoices", qWithMigrationInvoices); err != nil {
				return err
			}
		}

	}

	// header param withStackTrace
	if o.WithStackTrace != nil && *o.WithStackTrace {
		if err := r.SetQueryParam("withStackTrace", "true"); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
